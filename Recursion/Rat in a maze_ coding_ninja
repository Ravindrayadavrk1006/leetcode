https://www.codingninjas.com/studio/problems/rat-in-a-maze_1215030?leftPanelTabValue=SUBMISSION

simple use of recursion  can easily understand --->
from current position we have 4 directions to go, if from current position we check if we can go in one direction
we make current position as visited and then move to that position , we can move to a position if it's not visited(**important thing**
visited ds is used to avoid looping and if we have visited a position we won't visit it again in the current flow )



#include <bits/stdc++.h> 

void searchMazeHelper(int i,int j,vector<vector<int>>& arr , vector<vector<int>>& visited, vector<string>& ans,string s,int n){
    if(i == n-1 && j==n-1){
        ans.push_back(s);
        return;
    }
    //normal cases

    //move downward
    //checking if can be moved in the down direction
    if(i+1 <n && !visited[i+1][j] && arr[i+1][j] == 1 ){
        //mark the current pos as visited
        visited[i][j] = 1;
        s.push_back('D');
        searchMazeHelper(i+1,j,arr,visited,ans,s,n);
        s.pop_back();
        visited[i][j] = 0;
    }
    //move left
    //checking if can be moved in the left direction
    if(j-1 >= 0 && !visited[i][j-1] && arr[i][j-1] == 1 ){
        //mark the current pos as visited
        visited[i][j] = 1;
        s.push_back('L');
        searchMazeHelper(i,j-1,arr,visited,ans,s,n);
        s.pop_back();
        visited[i][j] = 0;
    }
    //move right
    //checking if can be moved in the right direction
    if(j+1 <n && !visited[i][j+1] && arr[i][j+1] == 1 ){
        //mark the current pos as visited
        visited[i][j] = 1;
        s.push_back('R');
        searchMazeHelper(i,j+1,arr,visited,ans,s,n);
        s.pop_back();
        visited[i][j] = 0;
    }
    //move up
    //checking if can be moved in the right direction
    if(i-1>=0 && !visited[i-1][j] && arr[i-1][j] == 1 ){
        //mark the current pos as visited
        visited[i][j] = 1;
        s.push_back('U');
        searchMazeHelper(i-1,j,arr,visited,ans,s,n);
        s.pop_back();
        visited[i][j] = 0;
    }
}
vector < string > searchMaze(vector < vector < int >> & arr, int n) {
    // Write your code here.
    vector<string> ans;
    vector<vector<int>> visited(n, vector<int>(n,0));
    if(arr[0][0] == 0)return ans;
    searchMazeHelper(0, 0, arr,visited, ans,"", n);
    // for(auto el: ans)cout<<el<<" ";
    // cout<<endl;
    return ans;
}
