
//SOLUTION 1
/*

    simple approach -> we are using nomal disjoint set algorithm and then using it for further solution
    for all the already ones we are using unionby size and joining them , so that we get the size of the union and as well as have joined them as well.

    //further we are assuming to make 0  as 1 and checking in all the four directions which are the cluster it is joining to,
    the total size of the cluster will be all the cluster in four directions sum and 1 for itself. the size of cluster is found in the size array of DisjointSet by using unionBySize function.
    
*/

class DisjointSet{
    public:
        // we will neeed them outside where this class object is created and hence kept public
        vector<int> rank, par, size;
        DisjointSet(int n){
            //n+1 since 1 based indexing given
            rank.resize(n+1,0);
            //size is usefulll for unionby size
            size.resize(n+1);
            par.resize(n+1);
            for(int i = 0 ; i<=n; i++){
                par[i]=i;
                size[i] =1;
            }

        }
        int findPar(int node){
            if (node == par[node])return node;
            //normal cases
            return par[node] = findPar(par[node]);
        }
        void unionByRank(int u, int v){
            int ult_u = findPar(u);
            int ult_v = findPar(v);
            if(ult_u == ult_v )return ;
            //normal cases
            if(rank[ult_v]< rank[ult_u]){
                par[ult_v] = ult_u;
            }
            if(rank[ult_u]< rank[ult_v]){
                par[ult_u] = ult_v;
            }
            if(rank[ult_v] == rank[ult_u]){
                par[ult_v] = ult_u;
                rank[ult_u]++ ;
            }
        }
     //since rank get distorted and become useless for us instead of just showing which is greater cluster
    //we are using size to keep a track of size or number of nodes in each cluster this will be very usefull later on
        void unionBySize(int u, int v ){
            int ult_u = findPar(u);
            int ult_v = findPar(v);
            if(ult_u == ult_v )return ;
            if(size[ult_u] < size[ult_v]){
                par[ult_u] = ult_v;
                size[ult_v ] += size[ult_u] ;

            }
            //this will hand both the if else and else since in both cases same will be happeing
            else{
                par[ult_v] =ult_u;
                size[ult_u] += size[ult_v];
            }
        }
};
class Solution {
private:
    bool isValid(int adjr,int adjc,int n){
        return adjr>=0 && adjr<n && adjc >=0 && adjc< n;
    }
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int nodes_in_ds = n*n;
        DisjointSet ds(nodes_in_ds);
        for(int i=0; i< n;i++){
            for(int j=0;j<n; j++ ){
                if(grid[i][j] ==1){
                    int dr[] = {0,1,0,-1};
                    int dc  [] = {1,0,-1,0};
                    for( int ind= 0; ind<4 ; ind++){
                        int adjr = i+dr[ind];
                        int adjc = j+ dc[ind];
                        if( isValid(adjr,adjc,n)){
                        if(grid[adjr][adjc] ==1){
                            int node = i*n + j;
                            int adjNode = adjr*n + adjc;
                            if(ds.findPar(node) != ds.findPar(adjNode)){
                                ds.unionBySize(node, adjNode);
                            }
                        }
                    }
                    }
                }
            }
        }

        //brute force 

        int max_size = 1 ;
        //let's initialzie the max_size with the current largest cluster so that we can compare with this one
        for(int i = 0; i< nodes_in_ds; i++ ){
            cout<<i <<" "<<ds.size[ds.findPar(i)]<<endl;
            //for each node find it's parent and then the size of the parent and set it to max_size value if it is grater than 1;
            max_size = max(max_size, ds.size[ds.findPar(i)]);
        }
        cout<<"inital max_size"<<max_size<<endl;
        //let's try to make 0 to 1 and try to connect and know how much size increases and compare the size
        for(int row = 0 ; row< n; row++){
            for(int col= 0; col < n ; col++){
                if(grid[row][col] == 0){
                    cout<<"zeroth cell"<<row<<col<<endl;
                    int dr[] = {0,1,0,-1};
                    int dc[] = {1,0,-1,0};
                    //we are using set data structures to store the parent of adjcent cluster , set specically used since the node can be connected to same cluster on more than one side and hence keeping set which will store the ultimate parent and hence will only store unique parents
                    set<int> components;
                    for( int ind= 0; ind<4 ; ind++){
                        int adjr = row+dr[ind];
                        int adjc = col+ dc[ind];
                        if( isValid(adjr,adjc,n)){
                            if(grid[adjr][adjc] ==1){
                                int adjNode = adjr*n + adjc;
                                int adj_parent = ds.findPar(adjNode);
                                cout<<"adjNode"<<adjNode<<"adjNodeParent"<<adj_parent<<endl;
                                components.insert(adj_parent);
                                }
                        }
                    }
                    int total_size = 0;
                    cout<<"all adjcent parents of"<<row<<col<<"  are-->>";
                    for(auto it: components){
                        cout<<it<<" "<<endl;
                        total_size += ds.size[it];
                    }
                    max_size = max(max_size, total_size+1);
                }

            }
        }
        return max_size;
    }
};
