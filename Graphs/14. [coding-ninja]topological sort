/*
  question link -> https://www.naukri.com/code360/problems/topological-sort_982938?leftPanelTabValue=SUBMISSION
    explanation:
        the concept of topological sort i.e that if there is a path from u to v , then u must lie before in sort.

        here we are using dfs travesal to travesal the adjacent nodes , since the graph is acyclic and directed 
        it means,  the node which has no path from it i.e outdegree 0 , is visited last and when all the path from the current node is done we are pushing the elemnt in the stack,
        and hence the element will be at lowest in the stack and therefore order will be maintained.

        simple dfs travesal and once dfs for a node is done we are pushing the element in the stack.

        for returning the answer popping all the element and pushing in the answer array

*/
#include <bits/stdc++.h> 
using namespace std;
void dfs(int node,vector<vector<int>>& adj_list,vector<bool>& visited,stack<int>& st){
    visited[node] = true;
    for(int adj_el : adj_list[node]){
        if(!visited[adj_el])
            dfs(adj_el,adj_list,visited,st);
    }
    //when all the adjacent travesal for the current node done then push the current node in the stack
    st.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
   //making adjacency list from the edges

   vector<vector<int>> adj_list(v);
   for(auto it: edges){
       adj_list[it[0]].push_back(it[1]);
   }

   vector<bool> visited(v,false);
   stack<int> st;
   for(int i = 0 ; i<v ; i++){
        if(!visited[i])
            dfs(i,adj_list, visited,st);
   }
   vector<int> ans;
   while(!st.empty()){
       ans.push_back(st.top());
       st.pop();
   }
   return ans;
}
