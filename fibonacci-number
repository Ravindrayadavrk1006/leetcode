class Solution {
public:
    //SOLUTION 3 fuction defined for Solution 3
    /*IDEA-> for solution 3
      algorthim used dynamic programming since the terms in the last level and in internal levels of binary tree are repeating continuously 
      using a vector to store the value and before doing the recursive call checking if the value already calculated and present in the vector or not if not present
      then only we proceed for calling the function else fetch the value from the vector in O(1) time
      
      TIME COMPLEXITY: O(N)
      SPACE COMPLEXITY: O(N)
      
    */
    int fibbonaci(vector<int> &vec,int n)
    {
        if(n==0) return 0;
        if(n==1) return 1;
        else
        {
            int a;
            int b;
            if(!vec[n-2])
            {
                a=fibbonaci(vec,n-2);
                vec[n-2]=a;
            }
            else
            {
                a=vec[n-2];
            }
            if(!vec[n-1])
            {
                b=fibbonaci(vec,n-1);
                vec[n-1]=b;
            }
            else
            {
                b=vec[n-1];
            }
            vec[n]=a+b;
            return vec[n];
        }
    }
    int fib(int n) {
        
        if (n==0) return 0;
        if (n==1) return 1;
        
        
        
        //SOLUTION 1
        /*
        IDEA-> using the normal process of recursion to form the binary tree
         TIME COMPLEXITY:  2^N
        SPACE COMPLEXITY: O(1)
        */
        
        
        
        // else
        // {
        //     return fib(n-2)+fib(n-1);
        // }
        
        //SOLUTION 2
        
        /*
        IDEA-> using a for loop to just do the normal sum of last two values
         TIME COMPLEXITY: O(N)
      SPACE COMPLEXITY: O(1)
        */
        
        
        // int fp=1;
        // int sp=0;
        // int output=0;
        // for(int i=2;i<=n;i++)
        // {
        //     int temp=fp+sp;
        //     sp=fp;
        //     fp=temp;
        // }
        // return fp;
        
        
        
        //SOLUTION 3
        vector<int> vec(n+1);
        return fibbonaci(vec,n);
    }
};
