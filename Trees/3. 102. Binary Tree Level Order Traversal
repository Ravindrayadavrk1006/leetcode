/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
/*
    approach --> we are using a queue for pushing the elemnent and maintain the order , since queue is first in and first out so better for us.
    in the queue we start by inserting the root element.
    then we try to remove all the elements pushed at one level and at the same time pushing every element removed it's left and right children 
*/
private:
    vector<vector<int>> lever_order_traversel_helper(TreeNode* root){
        vector<vector<int>> ans ;
        if(root ==  NULL)return ans;
        //normal cases 
        queue<TreeNode*> qs;  //queue structure 
        qs.push(root);
        //we will check till the queue becomes empyt
        while(!qs.empty()){
            vector<int> level;
            //so that not checking every time but once at start
            int size = qs.size();

            //for loop required since we have to print all the elements at a level in one go 
            for(int i = 0 ; i< size ; i++){
                //read the front element value
                TreeNode* front =  qs.front();
                //remove the front element
                qs.pop();
                //if not null then proceed  to push left and right nodes to the queue and in ans push current node value
                if(front != NULL){
                    qs.push(front->left);
                    qs.push(front->right);
                    level.push_back(front->val);
                }
            }
            if(level.size())ans.push_back(level);
        }
        return ans;
    }
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        return lever_order_traversel_helper(root);
    }
};
