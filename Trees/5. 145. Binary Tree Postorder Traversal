/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
    
class Solution {
private:
    void recursive_inorder(TreeNode* root , vector<int>& ans){
        if(root == NULL)return;
        recursive_inorder(root->left, ans);
        recursive_inorder(root->right, ans);
        ans.push_back(root->val);
    }




    //we take 2 stacks . we pop the node from stack 1 and push it to stack 2 and push it's left then right to stack1
    void iterative_using_two_stack(TreeNode* root, vector<int>& ans){
        if(root == NULL)return;
        stack<TreeNode*> st1;
        stack<int> st2;
        st1.push(root);
        while(!st1.empty()){
            TreeNode* top = st1.top();
            st1.pop();
            st2.push(top->val);
            if(top->left != NULL)st1.push(top->left);
            if(top->right != NULL)st1.push(top->right);
        }
        //pushing all the elements from st2 which has answer to the final ans array done in order since pushing at beginning O(n) for one insertion
        while(!st2.empty()){
            ans.push_back(st2.top());
            st2.pop();
        }
    }


    //iterative using one stack
    void iterative_using_one_stack(TreeNode* root, vector<int>& ans){
        if(root == NULL)return;
        stack<TreeNode*> st;
        // st.push(root);
        TreeNode* curr = root;
        while(curr != NULL || !st.empty()){
            if(curr != NULL){
                st.push(curr);
                curr = curr->left;
            }
            //we have reached to null in the left direction 
            //hence going in right direction
            else{
                TreeNode* el = st.top()->right;

                //if right is null it means both right and left are null henc we need to pop it
                if(el == NULL){
                    TreeNode* el = st.top();
                    ans.push_back(el->val);
                    st.pop();
                    //since we have reached here it means stack top has no right 
                    //hence we are tyring to check the current top is immediate right of the popped element then we can pop this too
                    while(!st.empty() && el == st.top()->right){
                        el = st.top();
                        st.pop();
                        ans.push_back(el->val);
                    }
                }
                else{
                    curr = el;
                }
            }
        }

    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        //CALLING SOLUTION 1 
        // recursive_inorder(root, ans);


        //CALLING SOLUTION 2
        //iterative_using_two_stack(root, ans);

        //CALLING SOLUTION 3
        iterative_using_one_stack(root, ans);
        return ans;
    }
};
