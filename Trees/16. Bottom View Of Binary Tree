#include <bits/stdc++.h>
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

/*
    this problem is exactly similar to 15. Top View Of Binary Tree in our trees solution github
    only one differce we needed the first inserted element in 15. Top View Of Binary Tree but here we need the last inserted element in that column 
    hence we keep on overwriting it 
*/
vector<int> helper(TreeNode<int> * root){
    vector<int> ans;
    if(root == NULL)return ans;
    //for each element in the queue for BFS traversal we will store the node and it's column number
    queue<pair<TreeNode<int>*,int>> q;
    //0 is the column here
    q.push({root,0});
    map<int,int> mp;

    //simply doing BFS 
    while(!q.empty()){
        pair<TreeNode<int>*, int> front = q.front();


        //this if checks to keep only the first inserted element which was case in 15. Top View Of Binary Tree
        // if(mp.find(front.second) == mp.end()){
        //     mp[front.second] = front.first->data;
        // }
        //since we want the last inserted node in that column so we keep overwriting in that column
        mp[front.second] = front.first->data;
        //remove the front from the queue
        q.pop();
        //push current root's left in the queue
        if(front.first->left != NULL){
            q.push({front.first->left,front.second-1});
        }
        //push current root's right in the queue
        if(front.first->right != NULL){
            q.push({front.first->right, front.second+1});
        };
    }

    //store all the element from the map into the ans 
    for (auto el : mp){
        ans.push_back(el.second);
    }
    return ans;

}

vector<int> bottomView(TreeNode<int> * root){
    // Write your code here.
    return helper(root);
}
