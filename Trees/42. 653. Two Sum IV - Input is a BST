/*
    SOL 1
    approach -->
        doing inorder travesal since inorder travesal of bst is sorted and store the inorder traversal in  an array called inorder. Once we have inorder we can use two pointer approach for finding the two sum.
        this solution is taking O(n) inorder travesal + O(n) using two pointer approach

    SOL 2:
        Do any kind of traversal, and if k - curr->root->val key exist in hashmap then we return true else we store curr->root->val as key

    SOL 3:
        we can use the concept of 41. 173. Binary Search Tree Iterator i.e iterator which does notthing out of box but inorder travesal using stack .which gives sorted element.
        it has a function next which gives the next element.
           APPROACH -> 
            find the ascending sorted inorder by using the exact same code of i.e create the object of that class
            //we also need descending sorted values , for it what we can do do in 41. where we were keep pusing left  leftwe will now push right right . and instead of next we will have a before function
            this funciton will give the current top for this object stack and then set pointer to current->left and keep pushing the right right element exactly opposite of next in the original 41.
            now will call next() from first and before() from second.
            i = next()
            j = before()
            if i +j  > k we will call use the same i and will call before to update the j since we need to decrease the value


        //code
            i = next()
            j = before()
            while(i && j){

                if(i->val()+j->val()> == true)return true;
                if(i->val()+j->val()> k) j = before();
                else
                // we will have i->val()+j->val() < k  since we will try to increase the i
                i = next()
            }
            return false;

 */
class Solution {
private:
    // SOL 1 ------------->
    void helper_inorder_traversal(TreeNode* root, vector<int>& inorder){ 
        if(root == NULL)return;
        helper_inorder_traversal(root->left,inorder);
        inorder.push_back(root->val);
        helper_inorder_traversal(root->right, inorder);
    }
    bool two_sum(TreeNode* root , int k){
        //since asked there should exist two number whose sum is k , but there are no two numbers
        if(root == NULL)return false;
        vector<int> inorder; //traversal of bst to store stored so that we can perform two pointer approach
        helper_inorder_traversal(root, inorder);
        int arr_size = inorder.size();

        //two pointer approach for finding the sum
        int i =  0;
        int j = arr_size-1;
        while(i<j){
            if(inorder[i] + inorder[j] ==  k ) return true;
            else if (inorder[i] + inorder[j] < k)i++;
            else j--;
        }
        return false;
    }

    //----------- end sol 1

    //---> SOL2
    bool sol_2_two_sum(TreeNode* root, int k,unordered_map<int,bool>& mp){
        if(root == NULL)return false;
        if(!(mp.find(k-root->val)== mp.end()))return true;
        else mp[root->val] = true;
        if(sol_2_two_sum(root->left, k, mp))return true;
        if(sol_2_two_sum(root->right, k, mp))return true;
        return false;
    }
public:
    bool findTarget(TreeNode* root, int k) {
        // SOL 1 CALLING
        //return two_sum(root, k);

        /* sol 2 calling*/
        unordered_map<int,bool> mp;
        return sol_2_two_sum(root, k, mp);
    }
};
