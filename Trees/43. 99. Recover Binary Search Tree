/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    /**--------SOLUTION 1(NAIVE APPROACH)------**/
    /*
        EXPLANATION:
            doing inorder travesal and then copying the inorder travesal and sorting the copied inorder travesal.we compare both the array and the first different element are the swapped element.
        let swapped values be p ,q
        now we travese the the tree and where we find the root->val  = p we set root->val = q
        and where we find root->val = q we set root->val = p
    */
    /*
    void helper_inorder_traversal(TreeNode* root, vector<int>& inorder){
        if(root == NULL)return;
        helper_inorder_traversal(root->left, inorder);
        inorder.push_back(root->val);
        helper_inorder_traversal(root->right, inorder);
    }
    void helper_swapper(TreeNode* root, int p, int q, bool swapped_p, bool swapped_q){
        if(root == NULL)return;
        //if swapped at any time no need to traverse further tree 
        if(swapped_p && swapped_q)return;

        if(root->val == p){
            root->val = q ;
            swapped_p = true;
        }
        //else if condition so that at one particular node one of this swap is peformed 
        else if(root->val == q){
            root->val = p ;
            swapped_q = true ;
        }
        helper_swapper(root->left, p, q, swapped_p, swapped_q);
        helper_swapper(root->right, p, q, swapped_p, swapped_q);
    }
    void naive_sol(TreeNode* root){
        if(root == NULL)return;
        vector<int> inorder;
        helper_inorder_traversal(root, inorder);
        //creating a copy of inorder array for sorting the above
        vector<int> sorted = inorder;
        sort(sorted.begin(), sorted.end());
        for(int i = 0 ; i < inorder.size(); i++)cout<<inorder[i]<<" ";
        cout<<endl;
        for(int i = 0 ; i < inorder.size(); i++)cout<<sorted[i]<<" ";
        
        int p,q;
        for(int i = 0 ; i < inorder.size(); i++){
            if(sorted[i] != inorder[i]){
                p = inorder[i];
                q = sorted[i];
                break;
            }
        }
        //swapping when we find the element we the value
        cout<<"p "<<p<<" q"<<q<<endl;
        helper_swapper(root, p, q, false, false);
    }
    */


    /**--------END------**/


   
   /*-------------SOL 2--------------*/
    /*
        concept -> there can two conditions if the adjacent elements are swapped .
        if non adjacent elements are swapped
        for comparing element is swapped or not we will do inorder traversal and if current element is not greater than previous element it means it is swapped
        we will keep three variables if , if third variable value is present if we find out the third value not following the inorder sorted traversal then we swap first with this third disturbance , stating it is non-adjecnt swapped

        if we do not find the third element swapped or disturbed we sort first and second 
   */
    TreeNode* first;
    TreeNode* prev; //for storing the previous element
    TreeNode* second; 
    TreeNode* third;
    void helper_inorder(TreeNode* root){
        if(root == NULL)return;
        helper_inorder(root->left);
        //main code
        if(prev!=NULL && prev->val > root->val){
            //it means no value is saved yet
            if(first == NULL){
                first = prev;
                second = root;
            }
            else{
                third = root;
            }
        }
        //current become previous
        prev = root;
        helper_inorder(root->right);
    }
    void optimum_sol(TreeNode* root){
        first = second = third = NULL;
        prev = new TreeNode(INT_MIN);
        helper_inorder(root);
        //first also checked for root == NULL
        if(first && third)swap(first->val,third->val);
        else if(first && second )swap(first->val, second->val);
    }
public:
    void recoverTree(TreeNode* root) {
        //calling sol1
        //naive_sol(root);

        //CALLING SOL2
        optimum_sol(root);
    }
};
