/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    //SOL 1
    void in_order_traversal_helper(TreeNode* node,vector<int>& ans){
        if(node == NULL)return;
        in_order_traversal_helper(node->left,ans);
        ans.push_back(node->val);
        in_order_traversal_helper(node->right,ans);
    }
    //SOL 2
    /*
        in this we keep pushing the left element in the stack till we find null once null is found we pop the top most 
element add it in the result and then push the top->right in the stack
    */
    void  iterative_inorder_traversal(TreeNode* root, vector<int>& ans){
        if(root == NULL)return;
        stack<TreeNode*> st;
        while(true){
            if(root != NULL)
            {
                st.push(root);
                root= root->left;
            }
            else
            {
                if(st.empty())break;
                TreeNode* top  = st.top();
                st.pop();
                ans.push_back(top->val);
                root = top->right;
            }

        }
    }


//SOL 3 MORRIS TRAVERSAL  EXPLANATION IS IN C.P NOTES
vector<int> morrisTraversal(TreeNode* root){
        //S.C O(1) T.C O(N)   //so here we are reducing S.C in this algorithm
        vector<int> inorder;
        TreeNode *curr = root;
        while(curr != NULL){
            //1. if there is no left
            if(curr->left == NULL){
                inorder.push_back(curr->val);
                curr = curr->right;
            }
            //left exist
            else{
                //going to the rightmost of left subtree 
                TreeNode* prev = curr->left;
                //moving to the right most node of left subtree and prev->right != curr to insure if already visited do not fall in infite loop
                while(prev->right && prev->right != curr){
                    prev = prev->right;
                }
                //if there is no thread created it means visiting for the first time
                if(prev->right == NULL){
                    //creating ther thread 
                    prev->right = curr;
                    //start traversing the leftsubtree since it has not been traversed
                    curr = curr->left;
                }
                //left has already been visited since the thread is present 
                else{
                    //remove the thread
                    prev->right = NULL;
                    //push the current element in the ans
                    inorder.push_back(curr->val);
                    //move to right since left already traversed
                    curr = curr->right;
                }
            }
        }
        return inorder;
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        //SOL 1 CALLING
        // in_order_traversal_helper(root,ans);

        //SOL 2 CALLING 
        iterative_inorder_traversal(root, ans);
        return ans;
    }
};
