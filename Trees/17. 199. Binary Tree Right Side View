/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*
    simple application of level order travesal 
    here condition is that for each level we want the last element of that level hence we are simply taking a map which will store single value for each row or level.
    we keep on updating the value of mp[row] for each element of that row in level order traversal and by default last value will remain


*/
class Solution {
private:
    vector<int> helper(TreeNode* root){
        vector<int> ans;
        if(root == NULL)return ans;

        queue<TreeNode*> q;

        //for string a value for each column
        map<int,int> mp;
        q.push(root);
        int level = 0;

        //simple BFS traversal
        while(!q.empty()){
            int q_size = q.size();
            //here using for loop because we keep to keep track which is the current level which we are updating after this for loop
            for(int i = 0; i<q_size;i++){
                TreeNode* front = q.front();

                //keep on overwriting the value for this row in the map by default last inserted value for that key of map will remain 
                mp[level]= front->val;
                q.pop();
                if(front->left != NULL){
                    q.push(front->left);
                }
                if(front->right != NULL){
                    q.push(front->right);
                }
            }
            level++;
        }
        for(auto el: mp){
            ans.push_back(el.second);
        }
        return ans;
    }
public:
    vector<int> rightSideView(TreeNode* root) {
        return helper(root);
    }
};
