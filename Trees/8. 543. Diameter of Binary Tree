/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    //for finding the max height of a binary tree 
    int max_height_func(TreeNode* root){
        if(root == NULL)return 0;
        int left_height = max_height_func(root->left);
        int right_height = max_height_func(root->right);
        return max(left_height, right_height)+1; 
    }
    //global var to store the height 
    int max_diameter = 0;
    void diameter_helper(TreeNode* root){
        if(root == NULL)return ;
        int max_height_left  = max_height_func(root->left);
        int max_height_right = max_height_func(root->right);
        max_diameter = max(max_diameter ,max_height_left+ max_height_right);
        diameter_helper(root->left);
        diameter_helper(root->right);
    }



    ///try to understand it using local variable

    /*
        if we try to closely have a look at the above function then we find that max_diameter is being compared with all the values that is max_height_left+ max_height_right , diameter(root->left), diameter(root->right). Same is being used int local var function
    
    */
    int diameter_helper_local_var_2(TreeNode* root) {
    if (root == NULL) return 0;

    int max_height_left = max_height_func(root->left);
    int max_height_right = max_height_func(root->right);
    int current_diameter = max_height_left + max_height_right;

    int left_diameter = diameter_helper_local_var_2(root->left);
    int right_diameter = diameter_helper_local_var_2(root->right);

    return max(current_diameter, max(left_diameter, right_diameter));
}


    /*
        using O(n) time complexity

        here we are writing our solution in the height find function since height is important and we can keep calculating our required solution on top of that.
        since height calucation start from LEFT MOST NODE AND IS CALCULATED FOR ALL THE NODES AND WE ALSO NEED TO CALCULATE THE DIAMETER AT EACH NODE AND STORE THE LARGEST VALUE , hence doing same 
    */
    int max_diam = 0;
    int sol_2(TreeNode* root){
        if(root == NULL)return 0;

        //simple calling 
        int left_height = sol_2(root->left);
        int right_height = sol_2(root->right);
        max_diam = max(left_height+right_height, max_diam);
        return 1+ max(left_height,right_height);

    }
    int diameterOfBinaryTree(TreeNode* root) {

        //using global var
        /*
        diameter_helper(root);
        return max_diameter;
        */

        //using local variable
        // return diameter_helper_local_var_2(root);


        //sol 2
        sol_2(root);
        return max_diam;
    }
};
